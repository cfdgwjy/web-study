Genarator函数是ES6提供的异步编程的解决方案。
从语法上，可以理解为Generator函数是一种状态机，里面封装多个内部状态。
执行Generator函数会返回一个遍历器对象。也就是说Generator函数除了是一个状态机还是一个遍历器生成函数。返回的遍历器对象，可以依次遍历Generator函数的每一
个状态。
Generator函数有两个特征。1.fucntion关键字和函数名之间有一个星号，2.函数体内用yield表达式，定义不同内部状态。
例子：
function *helloworldgenerator(){
yield 'hello';
yield 'world';
return end;
}
var hw = helloWorldGenerator();
执行： hw.next() // { value: 'hello', done: false }    hw.next() // { value: 'world', done: false }
hw.next()     // { value: 'ending', done: true }    hw.next()     // { value: undefined, done: true }

yield表达式  由于 Generator 函数返回的遍历器对象，只有调用next方法才会遍历下一个内部状态，所以提供了一种可以暂停的函数，yield就是标志。
