ES6引入for..of循环作为遍历所有数据结构的统一方法。
一个数据结构只要部署了symbol.iterator接口，就可以使用for..of遍历它的成员。也就是说for...of调用的是symbol.iterator接口。
使用范围： for...of使用的范围包括数组，set和map结构，类似数组的对象，Generator对象，字符串。
数组：例子：
const arr = ['red', 'green', 'blue'];
for(let a of arr){ console.log(a)} //// red green blue
for...of循环可以代替数组的forEach方法
arr.forEach((element,index)=>
 console.log(element); // red green blue
  console.log(index);   / // 0 1 2
)
JavaScript原有的for...in循环，只能获取对象的键名,不能获取键值，ES6提供for...of循环，允许遍历获取键值。
var arr = ['a', 'b', 'c', 'd'];
for(let a of arr){ console.log(a)}  //0,1,2,3
for(let a in arr){console.log(a)}   //a,b,c,d

Set 和 Map 结构也原生具有 Iterator 接口，可以直接使用for...of循环。
类似数组的对象
例子：字符串,nodelist,arhuments对象
let str = "hello";
for (let s of str) {
  console.log(s); // h e l l o
}
对于不是 Iterator 接口，一个简便的解决方法，就是使用Array.from方法将其转为数组。
let arrayLike = { length: 2, 0: 'a', 1: 'b' };
for (let x of Array.from(arrayLike)) {
  console.log(x);
}

对象
对于普通的对象，for...of结构不能直接使用。但是for...in依然可以用来遍历键名。
let es6 = {
  edition: 6,
  committee: "TC39",
  standard: "ECMA-262"
};
for (let e in es6) {
  console.log(e);
}
// edition// committee// standard
