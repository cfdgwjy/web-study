                                                  Symbol
  Symbol产生背景： ES5属性名都是字符串，容易产生属性名冲突。保证每个属性名字独一无二，防止属性名冲突。
  ES6引入了一种新的数据类型Symbol.它是第七种数据类型。
  Symbol值由Symbol函数生成。对象属性名有两种类型，一字符串，二Symbol类型。
  2.Symbol函数可以接受一个字符串作为参数，表示对symbol实例的描述。
  例子： let sy1=Symbol('f')    sy1//Symbol('f')
  Symbol值可以转为字符串，布尔值，但是不能转为数值。
  3.作为属性名的Symbol
  
  let msy=Symbol()
  //写法1
  let a={}  a[msy]='s'
  //写法2
  
  let a={
  [msy]='sw'
  }
                                                   Set
   数据结构Set,类似于数组，成员没有重复值。  Set为数据结构。
   例子：
   var a=new Set();
   [2,2,333,4,5,5,6].forEach(x=>a.add(x))
   
   for(i of a)
   { console.log(i)}    //2,333,4,5,6
   Set还可以接受数组作为参数. 例子： var a=new Set([1,2,2])  console.log(...a)   //[1,2]   
   遍历操作：
   1.  key() values()  entries()
   forEach 例子： var s1=new Set([1,2]);  s1.forEach((value,key)=>{console.log(value)})
   扩展运算符 ... 内部使用 for ..of 循环
   Set作用：并集，交集，差集。
                                                WeakSet
   WrakSet与Set类似，是不重复值的集合。不同之处： 1.WeakSet的成员只能是对象。   2.WeakSet中的值都是弱引用。
   WeakSet可以接受数组或者类似对象的数组作为参数。
   例子：let a=[[1,2],[3,4]]   const b=new WeakSet(a)
   
   WeakSet结构有三个方法。
   WeakSet.prototype.add()  向WeakSet的某个实例添加成员
   WeakSet.prototype.delete()   删除WeakSet的某个指定成员
   WeakSet.prototype.has() 返回一个值，表示某个值是否在WeakSet实例之中。
   
   
   
