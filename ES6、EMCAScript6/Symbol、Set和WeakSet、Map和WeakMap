                                                  Symbol
  Symbol产生背景： ES5属性名都是字符串，容易产生属性名冲突。保证每个属性名字独一无二，防止属性名冲突。
  ES6引入了一种新的数据类型Symbol.它是第七种数据类型。
  Symbol值由Symbol函数生成。对象属性名有两种类型，一字符串，二Symbol类型。
  2.Symbol函数可以接受一个字符串作为参数，表示对symbol实例的描述。
  例子： let sy1=Symbol('f')    sy1//Symbol('f')
  Symbol值可以转为字符串，布尔值，但是不能转为数值。
  3.作为属性名的Symbol
  
  let msy=Symbol()
  //写法1
  let a={}  a[msy]='s'
  //写法2
  
  let a={
  [msy]='sw'
  }
                                                   Set
   数据结构Set,类似于数组，成员没有重复值。  Set为数据结构。
   例子：
   var a=new Set();
   [2,2,333,4,5,5,6].forEach(x=>a.add(x))
   
   for(i of a)
   { console.log(i)}    //2,333,4,5,6
   Set还可以接受数组作为参数. 例子： var a=new Set([1,2,2])  console.log(...a)   //[1,2]   
   遍历操作：
   1.  key() values()  entries()
   forEach 例子： var s1=new Set([1,2]);  s1.forEach((value,key)=>{console.log(value)})
   扩展运算符 ... 内部使用 for ..of 循环
   Set作用：并集，交集，差集。
                                                WeakSet
   WrakSet与Set类似，是不重复值的集合。不同之处： 1.WeakSet的成员只能是对象。   2.WeakSet中的值都是弱引用。
   WeakSet可以接受数组或者类似对象的数组作为参数。
   例子：let a=[[1,2],[3,4]]   const b=new WeakSet(a)
   
   WeakSet结构有三个方法。
   WeakSet.prototype.add()  向WeakSet的某个实例添加成员
   WeakSet.prototype.delete()   删除WeakSet的某个指定成员
   WeakSet.prototype.has() 返回一个值，表示某个值是否在WeakSet实例之中。
   
                                                            MAP
     javascript的对象(Object),本质上是键值对的集合(hash)结构，但是传统上来说只能用字符串作为键。
     为了解决这个问题，ES6提供了Map结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当做键。
     也就是说，Object结构提供了“字符串-值”的对应，Map提供了“值-值”的对应。
     例子： const m=new Map(); o={p:'hello'}  m.set(o,'content')  m.get(o)  //"content"  m.has(o) //true  m.delete(o) //true
     
     作为构造函数，Map也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。
     const map=new Map(['name':'wang'],['title':'sr']);  map.size() //2     map.has('name') //"wang"     
     如果对同一个键多次赋值，那么后面的值会覆盖前一个值。
     
     实例的属性和操作方法。 Map结构：
     (1) size属性返回Map结构的成员个数。
     (2)Map.prototype.set(key,value)  set方法设置键key对应的值value.返回整个Map结构
     (3) Map.prototype.has(key) delete(key)  clear()清除所有成员，无返回值。
     遍历方法，Map结构提供三个遍历器和一个遍历方法。
Map.prototype.keys()：返回键名的遍历器。Map.prototype.values()：返回键值的遍历器。Map.prototype.entries()：返回所有成员的遍历器。
Map.prototype.forEach()：遍历 Map 的所有成员.
与其他数据结构的互换：
（1）转为数组  const map=new Map()   [...map]
（2）数组转为map  传入Map构造函数即可  new Map([ [1,2],[{foo:'2'},['abc']]
(3) Map转对象  如果map的键名是字符串，那么它可以无损转为对象。


     
     
     
   
