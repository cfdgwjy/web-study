                                                  函数的扩展
     函数参数默认值
函数参数默认值ES6写法：
    function log(x, y = 'World') {
  console.log(x, y);
}
log('Hello') // Hello World     log('Hello', 'China') // Hello China  
与结构赋值默认值结合使用
function log({x,y='2'}={}){    console.log(x, y); }    foo()  //undefined,2
相关知识点：参数默认值的位置    函数的legth属性  作用域  
        2. rest参数
ES6引入rest参数（形式为...参数名），用于获取函数的多余参数，这样就不需要使用arguments对象。rest参数搭配的变量是一个数组，该变量将多余的参数放入到数组之中。
例子：例子1：
function add(...values)
{ let num=0;
  for(i of values)
  { num=num+i;}
  return num;}
  add(...[1,2,3])   //6   
  例子2： const sortNumbers=(...numbers)=>numbers.sort;
        4.name属性
        5.箭头函数
ES6允许使用箭头定义函数。
var f=v=>v;
var f=function(v){ return v}
箭头函数格式  var 变量名=函数中的变量（变量1，变量2）>返回的变量 {代码块}
如果箭头函数不需要参数或需要多个参数，就用一个圆括号代表参数部分。
var f=()=>5;
var sum=(num1,num2)=>num1+num2;
如果箭头函数的代码块部分大于一条语句，就要用一个代码块括起来，并使用return语句返回。
var sum=(num1,num2)=>{ return num1+num2;}
由于大括号被解释为代码块，所以如果箭头函数必须返回一个对象，必须在对象外面加上一个括号，否则报错。
let getItem=id=>({id:id})
箭头函数另一个用处，简化回调函数。
正常函数写法： [1,2,3].map(function(x){return x*x;})  箭头函数写法： [1,2,3].map(x=>x*x)
箭头函数使用注意点：
1.函数体内的this对象，是定义时的对象，不是使用时的对象。
2.不可以使用arguments对象。
3.不可以使用yield命令，因此箭头函数不能用作generator函数。
箭头函数不适用场合：由于箭头函数使得this从动态变成静态。所以以下场景不适合箭头函数。
1. 定义对象的方法，其内部定义有this.     2.需要动态This,也不能用箭头函数。
        嵌套的箭头函数
 箭头函数内部，还可以再使用箭头函数。下面是一个ES5语法的多重嵌套函数。
 function insert(value){
 return {into:function(array)
 
      尾调用优化
      尾调用（Trail Call）是函数式编程的一个重要概念，本身简单，指函数的最后一步调用某个函数。
      例子： function f(x){ g(x)} 函数f的最后一步就是调用函数g,这就是尾调用。
      尾递归
      函数调用自身，称为递归，如果尾调用自身，就称为尾递归。递归非常耗内存，因为需要保存成百上千个调用帧，很容易发生栈溢出错误。
      例子：
      function factorial(n)
      {
      if(n===1) return 1;
      return n*factorial(n-1);
      factorail(5)       120
复杂度O(N)，如果改成尾调用
       function factorial(n)
      {
      if(n===1) return total;
        return factorial(n - 1, n * total);
}

factorial(5, 1) // 120
                      catch参数的代码省略
    javascript的try...catch结构。
    正确例子：
    try { // ... catch { //...}
      
      
      
      
      
