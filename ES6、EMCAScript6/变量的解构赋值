1.解构赋值： ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这叫做结构。
[数组的解构赋值]
2.例子：
以前： let a=1;b=2;
现在： let [a,b]=[1,2]
这种写法属于模式匹配，只要等号两边的模式匹配，左边的变量就会被赋予相应的值。

不完全结构： 等号左边的模式，只匹配一部分等号右边的数组，这种情况下，结构依然可以成功。
如果结构不成功，变量就等于undefined.
报错: 如果等号右边的不是数组，准确说不具有可遍历结构(Iterator接口)的数据，反正，只要有Iterator接口，就可以用解构赋值。
3.允许默认赋值： 结构赋值允许默认值。
要点： ES6内部使用严格相等运算符(===)，判断一个位置是否有值，所以，只有一个数据成员严格等于undifined,默认值才会生效。
正确例子： let [a,b='2']=['1'] let[a=4]=[null]
错误例子： let [x=1]=[null]

[对象的解构赋值] 结构不仅可以用于数组，还可以用于对象。
对象的解构赋值与数组的解构赋值之间的差别。 对象的解构赋值由属性决定。属性名不匹配则没有值。而数组的解构赋值由次序(位置决定)。
例子（正确）：let{name,sex}={name:"王意",sex:"女"} 
错误： let{age}={name:"王意",sex:"女"} 
结构失败时，变量等于undifined

作用：对象的解构赋值可以很方便的将现有对象的方法，赋给某个变量。
例子：let{log,sin,cos}=Math;
对象解构赋值的本质：先找到同名属性，然后再赋给对应的变量。真正赋值的不是属性，而是属性对应的变量。
与数组一样，对象也可以用于嵌套解构赋值。
例子：
let obj={p:
'ai
{b:'AI'
}
let{p:{x,{y}}}=obj;   结果：x:'ai' y:'AI'
例子（对象的解构赋值） var {x,y=5}={x:1}

注意点：已经声明的变量进行解构赋值应该这样做：
错误例子：let a; {a}={a:1}  原因：javascript引擎会把{}解析成一个代码块
正确例子： 正确写法： let a; ({a}={a:1});
****数组本身是特殊的对象，所以数组本身也可以被解析为对象。
字符串、数值、布尔值也可以解构赋值。不可被解构赋值： undifined,null

[函数的解构赋值]
函数的参数也可以使用解构赋值。并且可以用默认值
例子：function add(x,y){
return x+y;}
add([1,2])
不适用圆括号情况： （1）变量声明  （2）函数参数  （3）赋值语句

[解构赋值作用]
(1)交换变量的值  x=1;y=2;  [x,y]=[y,x]
(2)函数传参  function f([x,y,z]){}  返回多个值 return [x,y,z ]  
(3)提取JSON数据(****常见用法)
(4) 遍历Map结构。只想获取键名 for(let [key] of map)  只想获取键值 for(let [value] of map)
(5) 输入模块的指定方法   const{a,c}=require{"bwhh"}
