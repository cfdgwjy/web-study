新建一个二叉树，并中序遍历它。
二叉树就是一个节点是根节点，左边节点比它小，右边节点比它大的树。在中序遍历的过程中，用到了递归方法。
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>BinaryTree</title>
</head>

<body>
    <script type="text/javascript">
    //function BinaryTree() {
    //     生产节点对象
    //    var Node = function(key) {
    //        this.key = key;
    //        this.left = null;
    //        this.right = null;
    //    }
    //     根节点
    //    this.root = null;
    //     插入节点的方法
    //    var insertNode = function(node, newNode) {
    //        if (newNode.key < node.key) {
    //            if (node.left === null) {
    //                node.left = newNode;
    //            } else {
    //                insertNode(node.left, newNode);
    //            }
    //        } else {
    //            if (node.right === null) {
    //                node.right = newNode;
    //            } else {
    //                insertNode(node.right, newNode);
    //            }
    //        }
    //    }
    //     插入节点的接口
    //    this.insert = function(key) {
    //        var newNode = new Node(key);
    //        if (this.root === null) {
    //            this.root = newNode;
    //        } else {
    //            insertNode(this.root, newNode);
    //        }
    //    }
    //     节点的中序排序
    //    this.infix = function(node, callback) {
    //        if (node.left !== null) {
    //            this.infix(node.left, callback);
    //        }
    //        callback(node.key);
    //        if (node.right !== null) {
    //            this.infix(node.right, callback);
    //        }
    //    }
    //}
        // 输出函数

        function BinaryTree() {
            var Node = function (key) {
                //产生节点对象 
                    this.key = key;
                    this.left = null;
                    this.right = null;
                }
                //根节点
                this.root = null;
                //插入节点的方法
                var insertNode = function (node, newnode) {
                    if (newnode.key < node.key) {
                        if (node.left == null) {
                            node.left=newnode;
                        }
                        else {
                            insertNode(node.left, newnode);
                        }
                    }
                    else {
                        if (node.right == null) {
                            node.right=newnode;
                        }
                        else {
                            insertNode(node.right, newnode);
                        }
                    }
                }
                //插入节点的接口
                this.insert = function (key) {
                    var newnode = new Node(key);
                    if (this.root == null) {
                        this.root = newnode;
                    }
                    else {
                        insertNode(this.root, newnode);
                    }
                }
            //节点的中序排序

                this.infix=function(node,callback)
                {
                    if(node.left!==null)
                    {
                        this.infix(node.left, callback);
                    }
                    callback(node.key);
                    if(node.right!==null)
                    {
                        this.infix(node.right,callback)
                    }
                }
        }


    var dump=function(node){
    	console.log(node);
    }
    const cancan = new BinaryTree()
    var nodes = [1, 11, 111, 2, 22, 222, 3, 33, 333, 4];
    nodes.forEach(function (node) {
        cancan.insert(node)
    })
    console.log(1, cancan)
    cancan.infix(cancan.root, dump)
    console.log(1, cancan)
    </script>
</body>

</html>
