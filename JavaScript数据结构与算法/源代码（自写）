//冒泡排序
//对于冒泡排序，理解就是双层循环比较，每个元素都一次与数组各个元素比较，如果元素大于数组比较元素，则交换位置。
为了提高效率，第二层循环要减去第一层循环的次数，因为第一层循环之后有些元素已经排序好了。
function sort(array)
{
  var length=array.length;
  for(var i=0;i<length;i++)
  {
    for(var j=0;j<length-1-i;j++)
    {
      if(array[j]>array[j+1])
        {
          swap(j,j+1);
        }
    }
  }
};
var swap = function(index1, index2){
 var aux = array[index1];
 array[index1] = array[index2];
 array[index2] = aux;
}; 
var array=[1,4,3,2];
sort(array);

//选择排序
//选出第一小的值放在第一位，第二小的值放在第二位。就是双层循环，比较查出索引indexMin,然后与当前正在遍历的值进行交换，依次进行。
function sort(array) {
    var length = array.length;
    for (i = 0; i < length; i++) {
        var indexMin = i;
        for (j = i; j < length; j++) {
            if (array[indexMin] > array[j]) {
                indexMin = j;
            }
        }
        if (indexMin != i) {
            swap(indexMin, i)
        }
    }

}
var swap = function(index1, index2) {
    var aux = array[index1];
    array[index1] = array[index2];
    array[index2] = aux;
};
var array = [1, 4, 3, 2];
sort(array);
console.log(array)



//划分过程
function hf(array,left,right)
{
  var pivot=array[math.floor((left+right)/2)];
  i=left;
  j=righ;
  while(i<=j)
  {
    while(array[i]<pivot)
    {
      i++;
    }
    while(array[j]>pivot)
    {
      j--;
    }
    if(i<=j)
    {
      swapQuickStort(array, i, j); //
      i++;
      j--
    }
  }
  return i;
}



