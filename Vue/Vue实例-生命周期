
创建一个Vue实例。
每一个Vue应用都是通过Vue函数创建一个新的Vue实例开始的。
var vm=new Vue({});

数据与方法
当一个Vue实例被创建时，它将data对象的所有属性加入到vue的相应式系统中，当这些属性的值发生改变时，视图会发生响应，立即匹配为新的值。
//数据对象
var data={a:'1'};
该对象被加入到一个vue实例中。
var vm=new Vue(
{data:data}
)
//获得实例上的属性 //返回源数据对应的字段
vm.a==data.a  //true
//设置属性会影响到原始数据，反之亦然
vm.a=2   data.a //2
当这些数据被改变时，视图会进行重渲染，值得注意：当实例被创建时就已经存在于data中的属性才是响应式的。如果你知道晚些时候需要一个属性，但是它一开始为空
或者不存在，那么你仅需要设置一些初始值，比如：
data:
{todoText:'',
checked:'false',
todos:[]
}
唯一例外：object.freeze(),这会阻止修改现有属性，响应系统无法再追踪变化。
除了数据属性之外，Vue实例还暴露了一些有用的属性和方法，它们都有前缀$,以便与用户的属性区分开来。
var data={a:1}
vm.$data=data;  //true
vm.$watch();

每个Vue实例在被创建时，都需要一系列的初始化过程，例如：需要设置数据监听，编译模板，把实例挂载在DOM并监听变化更新DOM等。同时在这个过程也会运行一些叫做
生命周期钩子的函数，这给了用户在不同阶段添加自己代码的机会。
比如created钩子可以在一个实例被创建之后执行代码。也有一些其他生命周期钩子，在实例生命周期的不同阶段被调用。比如mounted,updated,destroyed.生命周期的
this上下文指向调用它的Vue实例。
